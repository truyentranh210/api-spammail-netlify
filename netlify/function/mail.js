import nodemailer from "nodemailer";

/*
 üì® API URL format:
   /mail/{subject}/{message}/{repeat}/{delay}/{to}

 Example:
   /mail/Hello%20World/Test%20Message/2/1/example@gmail.com
*/

const FUNCTION_PREFIX = "/.netlify/functions/mail/";

export async function handler(event) {
  try {
    const path = event.path || "";
    if (!path.startsWith(FUNCTION_PREFIX)) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Invalid path" })
      };
    }

    const tail = path.slice(FUNCTION_PREFIX.length);
    const parts = tail.split("/").map(p => decodeURIComponent(p));

    if (parts.length < 5) {
      return {
        statusCode: 400,
        body: JSON.stringify({
          error: "Thi·∫øu tham s·ªë: /mail/{subject}/{message}/{repeat}/{delay}/{to}"
        })
      };
    }

    const [subject, message, repeatRaw, delayRaw, to] = parts;
    const repeat = parseInt(repeatRaw, 10);
    const delay = parseFloat(delayRaw);

    if (!to || !to.includes("@")) {
      return { statusCode: 400, body: JSON.stringify({ error: "Email nh·∫≠n kh√¥ng h·ª£p l·ªá" }) };
    }

    if (!message) {
      return { statusCode: 400, body: JSON.stringify({ error: "N·ªôi dung tr·ªëng" }) };
    }

    if (isNaN(repeat) || repeat <= 0 || repeat > 50) {
      return { statusCode: 400, body: JSON.stringify({ error: "repeat ph·∫£i l√† s·ªë t·ª´ 1 ƒë·∫øn 50" }) };
    }

    if (isNaN(delay) || delay < 0 || delay > 60) {
      return { statusCode: 400, body: JSON.stringify({ error: "delay ph·∫£i l√† s·ªë t·ª´ 0‚Äì60 gi√¢y" }) };
    }

    // ‚úÖ C·∫•u h√¨nh Gmail (b·∫°n thay th√¥ng tin ·ªü ƒë√¢y)
    const EMAIL = "minhgemini2k9@gmail.com";
    const PASSWORD = "kuzz yzhl rwkl yjso"; // App Password (16 k√Ω t·ª±, kh√¥ng ph·∫£i m·∫≠t kh·∫©u th·∫≠t)

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: { user: EMAIL, pass: PASSWORD }
    });

    // üîÅ G·ª≠i l·∫∑p
    for (let i = 0; i < repeat; i++) {
      await transporter.sendMail({
        from: `"Mail API" <${EMAIL}>`,
        to,
        subject,
        text: message
      });

      console.log(`‚úÖ G·ª≠i l·∫ßn ${i + 1}/${repeat} ‚Üí ${to}`);
      if (i < repeat - 1 && delay > 0) {
        await new Promise(r => setTimeout(r, delay * 1000));
      }
    }

    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        message: `ƒê√£ g·ª≠i ${repeat} l·∫ßn t·ªõi ${to}`
      })
    };
  } catch (err) {
    console.error("‚ùå L·ªói:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: err.message })
    };
  }
}
